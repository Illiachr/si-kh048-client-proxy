<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description/>
    <FaultRules>
        <FaultRule name="JSONThreat">
            <Condition>jsonattack.JTP-Protect.failed == true</Condition>
            <Step>
                <Condition>fault.name Matches "ExecutionFailed"</Condition>
                <Name>AM-400JSONThreat</Name>
            </Step>
        </FaultRule>
        <FaultRule name="InvalidToken">
            <Step>
                <Name>RF-401TokenInvalid</Name>
            </Step>
            <Condition>fault.name = "invalid_access_token"</Condition>
        </FaultRule>
        <FaultRule name="ExpiredToken">
            <Step>
                <Name>AM-401TokenExpired</Name>
            </Step>
            <Condition>fault.name = "access_token_expired"</Condition>
        </FaultRule>
        <FaultRule name="FailedToResolveAPIKey">
            <Condition>verifyapikey.VAK-VerifyKey.failed = true</Condition>
            <Step>
                <Name>RF-401APIKey</Name>
                <Condition>(fault.name Matches "FailedToResolveAPIKey") or  (fault.name Matches "InvalidApiKey")</Condition>
            </Step>
        </FaultRule>
    </FaultRules>
    <DefaultFaultRule>
    </DefaultFaultRule>
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <Name>SA-SpikeArrest</Name>
            </Step>
            <Step>
                <Name>VAK-VerifyKey</Name>
                <Condition>(request.verb != "OPTIONS")</Condition>
            </Step>
            <Step>
                <Name>OAuthV2-VerifyAccessToken</Name>
                <Condition>(proxy.pathsuffix MatchesPath "/clients/*/*") or (proxy.pathsuffix MatchesPath "/clients/*") or (proxy.pathsuffix MatchesPath "/clients")</Condition>
            </Step>
            <Step>
                <Name>Q-EnforceQuota</Name>
            </Step>
            <Step>
                <Name>EV-ExtractReqParams</Name>
            </Step>
            <Step>
                <Name>AM-AssignProxyURL</Name>
            </Step>
        </Request>
        <Response/>
    </PreFlow>
    <PostFlow name="PostFlow">
        <Request/>
        <Response>
            <Step>
                <Name>JS-TransformResponse</Name>
                <Condition>(req_verb != "OPTIONS") or (req_verb != "DELETE")</Condition>
            </Step>
        </Response>
    </PostFlow>
    <Flows>
        <Flow name="JsonThreatProtect">
            <Description>JSON threat protect</Description>
            <Request>
                <Step>
                    <Name>JTP-Protect</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(request.verb = "POST") or (request.verb = "PATCH")</Condition>
        </Flow>
        <Flow name="OptionsPreFlight">
            <Request/>
            <Response>
                <Step>
                    <Name>AM-SetCORSHeaders</Name>
                </Step>
            </Response>
            <Condition>request.verb == "OPTIONS" AND request.header.origin != null AND request.header.Access-Control-Request-Method != null</Condition> 
        </Flow>
    </Flows>
    <HTTPProxyConnection>
        <BasePath>/replaced_by_config_json</BasePath>
        <Properties/>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="NoRoute">
        <Condition>request.verb == "OPTIONS" AND request.header.origin != null AND request.header.Access-Control-Request-Method != null</Condition>
    </RouteRule>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>